import re
from telegram import ( 
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    chat,
    replymarkup
)
import telegram
from telegram.ext import (
    CallbackContext, 
    Updater, 
    CommandHandler, 
    PicklePersistence, 
    Filters, 
    MessageHandler,
    updater,
    CallbackQueryHandler
)
from telegram.inline.inlinekeyboardmarkup import InlineKeyboardMarkup
from menu import main_menu_keyboard
from credentials import TOKEN
from key_bottons import main_menu
from message import sht, arz, crostini, kitch, nani, plen, hachap, ocak, huzur, nuri, sin, brod, dor, i, alatoo, mus, auto, anv, il, mag, theatre, zoo, fun, kat, smile, sport, strel


def start(update: Update, context: CallbackContext):
    context.bot.send_sticker(
        chat_id=update.effective_chat.id,
        sticker='CAACAgIAAxkBAAEDUadhl3oEHnxrZtIFM8g5H7Q2OiZnSgACWg8AAsFkiUtoBn1ASv7hiCIE'
    )
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}üòÉ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –æ—Ç–¥—ã—Ö–∞ \ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è".format(
            username=update.effective_user.first_name \
                if update.effective_user.first_name is not None \
                else update.effective_user.username
        ),
        reply_markup=main_menu_keyboard()
    )


def euro():

    keyboard = [
        [InlineKeyboardButton("–†–µ—Å—Ç–æ—Ä–∞–Ω –®—Ç–∞–π–Ω–±—Ä–æ–πüçΩ", callback_data='—à—Ç–∞–π–Ω–±—Ä–æ–π')],
        [InlineKeyboardButton("–†–µ—Å—Ç–æ—Ä–∞–Ω Arzu StyleüçΩ", callback_data='–∞—Ä–∑—É')],
        [InlineKeyboardButton("–†–µ—Å—Ç–æ—Ä–∞–Ω CrostiniüçΩ", callback_data='–∫—Ä–æ—Å—Ç–∏–Ω–∏')],
    ]
    reply_markup1 = InlineKeyboardMarkup(keyboard)
    return reply_markup1
def kavkaz():

    keyboard = [
        [InlineKeyboardButton("–ö–∞—Ñ–µ –ù–∞–Ω–∏ –ë–∏—à–∫–µ–∫üçΩ", callback_data='–ö–∞—Ñ–µ –ù–∞–Ω–∏ –ë–∏—à–∫–µ–∫')],
        [InlineKeyboardButton("–ö–∞—Ñ–µ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è –ø–ª–µ–Ω–Ω–∏—Ü–∞üçΩ", callback_data='–ö–∞—Ñ–µ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è –ø–ª–µ–Ω–Ω–∏—Ü–∞')],
        [InlineKeyboardButton("–•–∞—á–∞–ø—É—Ä–Ω–∞—è ‚Ññ1üçΩ", callback_data='–•–∞—á–∞–ø—É—Ä–Ω–∞—è ‚Ññ1')],
    ]
    reply_markup1 = InlineKeyboardMarkup(keyboard)
    return reply_markup1
def turk():

    keyboard = [
        [InlineKeyboardButton("–û–∂–∞–∫ –ö–µ–±–∞–øüçΩ", callback_data='–û–∂–∞–∫ –ö–µ–±–∞–ø')],
        [InlineKeyboardButton("–•—É–∑—É—ÄüçΩ", callback_data='–•—É–∑—É—Ä')],
        [InlineKeyboardButton("–ù—É—Ä–∏ –£—Å—Ç–∞üçΩ", callback_data='–ù—É—Ä–∏ –£—Å—Ç–∞')],
    ]
    reply_markup1 = InlineKeyboardMarkup(keyboard)
    return reply_markup1
def kino():

    keyboard = [
        [InlineKeyboardButton("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä –°–∏–Ω–µ–º–∞—Ç–∏–∫–∞ –ë–∏—à–∫–µ–∫ –ü–∞—Ä–∫üé•", callback_data='—Å–∏–Ω–µ–º–∞—Ç–∏–∫–∞')],
        [InlineKeyboardButton("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä Broadwayüé•", callback_data='–±—Ä–æ–¥–≤—ç–π')],
        [InlineKeyboardButton("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä Cinematica DordoiPlazaüé•", callback_data='–¥–æ—Ä–¥–æ–π')],
        [InlineKeyboardButton("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä IMAXüé•", callback_data='–∞–π–º–∞–∫—Å')],
        [InlineKeyboardButton("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä '–ê–ª–∞-–¢–æ–æ'üé•", callback_data='–∞–ª–∞—Ç–æ–æ')],
        [InlineKeyboardButton("–ê–≤—Ç–æ–∫–∏–Ω–æ—Ç–µ–∞—Ç—Äüé•üöò", callback_data='–∞–≤—Ç–æ')],
    ]
    reply_markup1 = InlineKeyboardMarkup(keyboard)
    return reply_markup1

def kult():

    keyboard = [
        [InlineKeyboardButton("M—É–∑–µ–π –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤üèõüé®", callback_data='–Ω–∞—Ü')],
        [InlineKeyboardButton("–ó–æ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–πüèõüå≥", callback_data='–∑–æ–æ')],
        [InlineKeyboardButton("–¢–µ–∞—Ç—Ä –æ–ø–µ—Ä—ã –∏ –±–∞–ª–µ—Ç–∞üèõü©∞üéº", callback_data='—Ç–µ–∞—Ç—Ä')],
    
    ]
    reply_markup1 = InlineKeyboardMarkup(keyboard)
    return reply_markup1
def kids():

    keyboard = [
        [InlineKeyboardButton("–ò–ª–ª—é–∑–∏–æ–Ω –ü–∞—Ä–∫ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–πüé†", callback_data='–∏–ª–ª—é–∑–∏–æ–Ω')],
        [InlineKeyboardButton("Magic Cityüé†", callback_data='–º–∞–≥–∏–∫')],
        [InlineKeyboardButton("Fun Cityüé†", callback_data='—Ñ–∞–Ω')],
    ]
    reply_markup1 = InlineKeyboardMarkup(keyboard)
    return reply_markup1
def active():

    keyboard = [
    
        [InlineKeyboardButton("–ö–∞—Ç–æ–∫ –ì–æ—Ä–æ–¥—Å–∫–æ–π‚õ∏", callback_data='–∫–∞—Ç–æ–∫')],
        [InlineKeyboardButton("Smileü§πüèª‚Äç‚ôÄÔ∏è", callback_data='—Å–º–∞–π–ª')],
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å T-CLUBüè∏", callback_data='—Å–ø–æ—Ä—Ç')],
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω–æ –°—Ç—Ä–µ–ª–∫–æ–≤—ã–π –ö–æ–º–ø–ª–µ–∫—Å 9*19üî´", callback_data='—Å—Ç—Ä–µ–ª')],
        [InlineKeyboardButton("ANVIO - –∫–ª—É–± –≤–∏—Ä—Ç—É–ª–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏üëÄ", callback_data='–∞–Ω–≤–∏–æ')],
        
    ]
    reply_markup1 = InlineKeyboardMarkup(keyboard)
    return reply_markup1



def kitchen1(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–¢–æ–ø 3 –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–µ–πüç¥",
        reply_markup=euro()
    )
def kitchen2(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–¢–æ–ø 3 –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –∫–∞–≤–∫–∞–∑—Å–∫–æ–π –∫—É—Ö–Ω–µ–πüç¥",
        reply_markup=kavkaz()
    )
def kitchen3(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–¢–æ–ø 3 –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å —Ç—É—Ä–µ—Ü–∫–æ–π –∫—É—Ö–Ω–µ–πüç¥",
        reply_markup=turk()
    )
def kino_choose(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–¢–æ–ø 5 –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤ –≥–æ—Ä–æ–¥–∞üé¨",
        reply_markup=kino()
    )
def kult_choose(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Äüèõ ",
        reply_markup=kult()
    )
def kids_choose(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–πüëßüèªüë¶üèº ",
        reply_markup=kids()
    )
def active_choose(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞üèÉüèª",
        reply_markup=active()
    )

CAFE_REGEX= r"(?=("+(main_menu[0]) + r"))"
KINO_REGEX= r"(?=("+(main_menu[1]) + r"))"
KULT_REGEX= r"(?=("+(main_menu[2]) + r"))"
PRIRODA_REGEX= r"(?=("+(main_menu[3]) + r"))"
KIDS_REGEX= r"(?=("+(main_menu[4]) + r"))"
BRON_REGEX= r"(?=("+(main_menu[5]) + r"))"


def kitchen(update: Update, context: CallbackContext):
    info = re.match(CAFE_REGEX, update.message.text)
    update.message.reply_text(
        kitch,
        
    )

def kino_go(update: Update, context: CallbackContext):
    info = re.match(KINO_REGEX, update.message.text)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
        reply_markup=kino()
    )
def kult_go(update: Update, context: CallbackContext):
    info = re.match(KULT_REGEX, update.message.text)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ  –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
        reply_markup=kult()
    )
def kids_go(update: Update, context: CallbackContext):
    info = re.match(KULT_REGEX, update.message.text)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–π ",
        reply_markup=kids()
    )
def active_go(update: Update, context: CallbackContext):
    info = re.match(KULT_REGEX, update.message.text)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞",
        reply_markup=active()
    )
def zapisat(update: Update, context:CallbackContext):
    z = update.message.text
    print(z[:5])
    if z[:5] == '–ë—Ä–æ–Ω—å':
        context.bot.send_message(
            chat_id = '@caffe_for', 
            text = z
        )

def zapis(update: Update, context: CallbackContext):
    info=re.match(BRON_REGEX, update.message.text)
    update.message.reply_text(
        '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫\n–ü—Ä–∏–º–µ—Ä: "–ë—Ä–æ–Ω—å:\n 1.–ò–º—èüó£\n 2.H–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚òéÔ∏è\n 3.H–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—èüè¢\n 4.K–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–πüë•"'
    )

def kino_finish(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    if query.data == '—Å–∏–Ω–µ–º–∞—Ç–∏–∫–∞':
        msg =  context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = sin,
            
            
        )
        query.message.reply_location(
            latitude=42.874481804326564, 
            longitude= 74.59113822023333,
            reply_to_message_id=msg.message_id,
            reply_markup=kino()
        )
    if query.data == '–±—Ä–æ–¥–≤—ç–π':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = brod,
            
        )
        query.message.reply_location(
            latitude=42.85604051822263,
            longitude=74.5851750981417,
            reply_to_message_id=msg.message_id,
            reply_markup=kino()
        )
    if query.data == '–¥–æ—Ä–¥–æ–π':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = dor,
            
        )
        query.message.reply_location(
            latitude=42.87611375973482, 
            longitude=74.61901202779183,
            reply_to_message_id=msg.message_id,
            reply_markup=kino()
        )
    if query.data == '–∞–π–º–∞–∫—Å':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = i,
            
        )
        query.message.reply_location(
            latitude=42.8341672836298, 
            longitude=74.62043723906825,
            reply_to_message_id=msg.message_id,
            reply_markup=kino()
        )
    if query.data == '–∞–ª–∞—Ç–æ–æ':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = alatoo,
            
        )
        query.message.reply_location(
            latitude=42.876168858158884, 
            longitude=74.60741666940719,
            reply_to_message_id=msg.message_id,
            reply_markup=kino()
        )
    if query.data == '–∞–≤—Ç–æ':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = auto,
            
        )
        query.message.reply_location(
            latitude=42.80528705730703,
            longitude=74.57928439116917,
            reply_to_message_id=msg.message_id,
            reply_markup=kino()
        )
    if query.data == '—à—Ç–∞–π–Ω–±—Ä–æ–π':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = sht,
            
        )
        query.message.reply_location(
            latitude=42.86703402056113,
            longitude=74.62305883991145,
            reply_to_message_id=msg.message_id,
            reply_markup=euro()
        )
    if query.data == '–∞—Ä–∑—É':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = arz,
            
        )
        query.message.reply_location(
            latitude=42.87895681598019,
            longitude=74.59642168465354,
            reply_to_message_id=msg.message_id,
            reply_markup=euro()
        )
    if query.data == '–∫—Ä–æ—Å—Ç–∏–Ω–∏':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = crostini
        )
        query.message.reply_location(
            latitude=42.87963958880446,
            longitude=74.61203929814246,
            reply_to_message_id=msg.message_id,
            reply_markup=euro()
        )

    if query.data == '–ö–∞—Ñ–µ –ù–∞–Ω–∏ –ë–∏—à–∫–µ–∫':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = nani
        )
        query.message.reply_location(
            latitude=42.834058553311394,
            longitude=74.63084078279456,
            reply_to_message_id=msg.message_id,
            reply_markup=kavkaz()
        )
    if query.data == '–ö–∞—Ñ–µ –ö–∞–≤–∫–∞–∑—Å–∫–∞—è –ø–ª–µ–Ω–Ω–∏—Ü–∞':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = plen
        )
        query.message.reply_location(
            latitude=42.87382035518623,
            longitude= 74.60119979814236,
            reply_to_message_id=msg.message_id,
            reply_markup=kavkaz()
        )
    if query.data == '–•–∞—á–∞–ø—É—Ä–Ω–∞—è ‚Ññ1':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = hachap
        )
        query.message.reply_location(
            latitude=42.829490652422905, 
            longitude=74.62213432512122,
            reply_to_message_id=msg.message_id,
            reply_markup=kavkaz()
        )

    if query.data == '–û–∂–∞–∫ –ö–µ–±–∞–ø':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = ocak
        )
        query.message.reply_location(
            latitude=42.875346, 
            longitude=74.615399,
            reply_to_message_id=msg.message_id,
            reply_markup=kavkaz()
        )
    if query.data == '–•—É–∑—É—Ä':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = huzur
        )
        query.message.reply_location(
            latitude=42.87895681598019,
            longitude=74.59642168465354,
            reply_to_message_id=msg.message_id,
            reply_markup=kavkaz()
        )
    if query.data == '–ù—É—Ä–∏ –£—Å—Ç–∞':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = nuri
        )
        query.message.reply_location(
            latitude=42.871908,
            longitude=74.581097,
            reply_to_message_id=msg.message_id,
            reply_markup=kavkaz()
        )
    if query.data == '–Ω–∞—Ü':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = mus
        )
        query.message.reply_location(
            latitude=42.87876988935866, 
            longitude= 74.61090751348894,
            reply_to_message_id=msg.message_id,
            reply_markup=kult()
        )
    if query.data == '–∑–æ–æ':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = zoo
        )
        query.message.reply_location(
            latitude=42.87876988935866, 
            longitude= 74.61090751348894,
            reply_to_message_id=msg.message_id,
            reply_markup=kult()
        )
    if query.data == '–∞–Ω–≤–∏–æ':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = anv
        )
        query.message.reply_location(
            latitude=42.873068755760805, 
            longitude= 74.63368429814226,
            reply_to_message_id=msg.message_id,
            reply_markup=active()
        )
    if query.data == '–∏–ª–ª—é–∑–∏–æ–Ω':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = il
        )
        query.message.reply_location(
            latitude=42.85890136774165, 
            longitude= 74.61008876459846,
            reply_to_message_id=msg.message_id,
            reply_markup=kids()
        )
    if query.data == '—Ç–µ–∞—Ç—Ä':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = theatre
        )
        query.message.reply_location(
            latitude=42.87796114715061,
            longitude= 74.61275032694044,
            reply_to_message_id=msg.message_id,
            reply_markup=kult()
        )
    if query.data == '–º–∞–≥–∏–∫':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = mag
        )
        query.message.reply_location(
            latitude= 42.85643099825967, 
            longitude= 74.62512139810312,
            reply_to_message_id=msg.message_id,
            reply_markup=kids()
        )
    if query.data == '—Ñ–∞–Ω':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = fun
        )
        query.message.reply_location(
            latitude= 42.874749254959355,
            longitude= 74.59043576930571,
            reply_to_message_id=msg.message_id,
            reply_markup=kids()
        )

    if query.data == '–∫–∞—Ç–æ–∫':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = kat
        )
        query.message.reply_location(
            latitude= 42.85853393149338, 
            longitude= 74.66536954046859,
            reply_to_message_id=msg.message_id,
            reply_markup=active()
        )
    if query.data == '—Å–º–∞–π–ª':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = smile
        )
        query.message.reply_location(
            latitude= 42.85748096767548, 
            longitude= 74.62744978279534,
            reply_to_message_id=msg.message_id,
            reply_markup=active()
        )
    if query.data == '—Å–ø–æ—Ä—Ç':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = sport
        )
        query.message.reply_location(
            latitude= 42.873314432026405, 
            longitude= 74.61323225395923,
            reply_to_message_id=msg.message_id,
            reply_markup=active()
        )
    if query.data == '—Å—Ç—Ä–µ–ª':
        msg = context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = strel
        )
        query.message.reply_location(
            latitude= 42.857891232066436, 
            longitude= 74.67698571348825,
            reply_to_message_id=msg.message_id,
            reply_markup=active()
        )



    
updater = Updater(TOKEN, persistence=PicklePersistence(filename='bot_data'))
updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CommandHandler('kitchen1', kitchen1))
updater.dispatcher.add_handler(CommandHandler('kitchen2', kitchen2))
updater.dispatcher.add_handler(CommandHandler('kitchen3', kitchen3))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(CAFE_REGEX),
    kitchen
))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(KINO_REGEX),
    kino_go
))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(KULT_REGEX),
    kult_go
))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(KIDS_REGEX),
    kids_go
))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(PRIRODA_REGEX),
    active_go
))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(BRON_REGEX),
    zapis
    ))

updater.dispatcher.add_handler(MessageHandler(
    Filters.text,
    zapisat
    ))

updater.dispatcher.add_handler(CallbackQueryHandler(kino_finish))
updater.dispatcher.add_handler(CallbackQueryHandler(kino_choose))
updater.dispatcher.add_handler(CallbackQueryHandler(kult_choose))
updater.dispatcher.add_handler(CallbackQueryHandler(kids_choose))

updater.start_polling()
updater.idle()
